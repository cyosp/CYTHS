#!/bin/bash

###############################################################################
#                                                                             #
# Author: CYOSP                                                               #
# Version: 1.2.0                                                              #
#                                                                             #
# Description: Receive CYTHS sensor data                                      #
#                                                                             #
# Parameters:                                                                 #
#  $1: File path to the JSON configuration file                               #
#                                                                             #
# Sample use:                                                                 #
#  cyths-receive /etc/cyths/config.json                                       #
#                                                                             #
# Dependencies:                                                               #
#  - jq (https://github.com/stedolan/jq)                                      #
#  - bc (Debian bc package)                                                   #
#  - rrdtool (Debian rrdtool package)                                         #
#  - rrdupdate (Debian rrdtool package)                                       #
#  - rrd2csv (https://github.com/williamrh/rrd2csv)                           #
#  - curl (Debian curl package)                                               #
#  - head (Debian coreutils package)                                          #
#                                                                             #
# --------------------------------------------------------------------------- #
#                                                                             #
# 1.2.0 - 2016-09-30                                                          #
#  - Manage new URL API: /API/set/info/ which replaces /switch/               #
# 1.1.1 - 2016-09-29                                                          #
#  - Manage cURL return code                                                  #
# 1.1.0 - 2016-07-16                                                          #
#  - Switch serial port from /dev/ttyACM0 to /dev/ttyAMA0                     #
# 1.0.2 - 2016-07-12                                                          #
#  - Update data format sent to switch URL                                    #
# 1.0.1 - 2016-07-08                                                          #
#  - RRD and CSV files moved to /var/lib/cyths base folder                    #
#  - Add rrdtool and rrdupdate output to log file                             #
# 1.0.0 - 2016-07-06                                                          #
#  - First version                                                            #
#    Data are retreived using serial port: /dev/ttyACM0                       #
#                                                                             #
###############################################################################

if [ $# -ne 1 ]
then
	echo "[$(basename $0)] takes only one parameter: the file path to the JSON configuration file"
	exit 1
fi

if [ ! -e "/usr/bin/jq" ]
then
	echo "jq is missing. Please install it"
	exit 1
fi

# Disable default process attached to the serial port
sudo systemctl stop serial-getty@ttyAMA0.service

# Define a variable for the configuration file
CONFIG_FILE_PATH="$1"

# Define a variable for the name of the solution
SOLUTION_NAME="cyths"

# Define log file path
FULL_PATH=$(readlink -f "$0")
FILE_BASENAME=$(basename "$FULL_PATH")
LOG_FILE_PATH=/var/log/$SOLUTION_NAME/${FILE_BASENAME}.log
LOG_DIRNAME=$(dirname "$LOG_FILE_PATH")

# Define data folders
DATA_FOLDER="/var/lib/$SOLUTION_NAME"
RRD_FOLDER="$DATA_FOLDER/rrd"
CSV_FOLDER="$DATA_FOLDER/csv"

# Create directories
mkdir -p "$LOG_DIRNAME"
mkdir -p "$RRD_FOLDER"
mkdir -p "$CSV_FOLDER"

# Extract needed values from JSON configuration file
JSCON_CONFIG_VIA_JQ=$(jq '.switchesList | map(.sensorId + "\n") | join( "" )' "$CONFIG_FILE_PATH" | sed 's|"\(.*\)"|\1|g' 2>&1)

# Manage IFS
IFS_BCKP=$IFS
IFS=$'\n'

# Declaration for array
declare -A config
REGISTRED="REGISTRED"

#
# Load configuration in array
# Line is driven by sensor identifier and REGISTRED value
#
for SENSOR_ID in $(echo -e $JSCON_CONFIG_VIA_JQ)
do
	# Manage only lines with a sensor identifier
	if [ -n "$SENSOR_ID" ]
	then
		config[$SENSOR_ID]=$REGISTRED
	fi
done

# Wait a new RSL code
while read LINE
do
	# Get received date <=> date when there is a new line
	RECEIVED_DATE=$(date "+%Y-%m-%d %H:%M:%S.%N")
	echo "${RECEIVED_DATE}" >> $LOG_FILE_PATH

	# Remove carriage return
	LINE=`echo $LINE | tr -d $'\r'`

	# Get RSL code
	CODE=$LINE

	# Code is an integer
	if [[ $CODE =~ ^-?[0-9]+$ ]]
	then
		# Get RSL code as binary
		BIN_CODE=$(echo "obase=2; $CODE" | bc 2>&1)

		BIN_CODE_LENGTH=${#BIN_CODE}
		if [ $BIN_CODE_LENGTH -lt 32 ]
		then
			HOW_MANY_ZERO=$(expr 32 - $BIN_CODE_LENGTH)
			# Left 0 padding
			for i in $(seq $HOW_MANY_ZERO)
			do
			  BIN_CODE="0${BIN_CODE}"
			done
		fi

		echo "  - BIN CODE: $BIN_CODE" >> $LOG_FILE_PATH

		# Get switch order code
		SWITCH_ORDER_CODE=${BIN_CODE:4:4}

		# It's a sensor code
		if [ "$SWITCH_ORDER_CODE" = "1111" ]
		then
			# Code structure
			# [2 bits/battery level] + [2 bits/protocol version] + [4 bits/1111 <=> rsl code not used] + [7 bits/sensor code] + [7 bits/humidity] + [10 bits/temperature]
		
			BIN_BATTERY_LEVEL=${BIN_CODE:0:2}
			BIN_PROTOCOL_VERSION=${BIN_CODE:2:2}
			BIN_SENSOR_CODE=${BIN_CODE:8:7}
			BIN_HUMIDITY=${BIN_CODE:15:7}
			BIN_TEMPERATURE=${BIN_CODE:22:10}

			# Get sensor code in base 10
			SENSOR_ID=$(echo "ibase=2; $BIN_SENSOR_CODE" | bc 2>&1)

			# Check sensor is registred in the configuration
			if [ ${config[$SENSOR_ID]} == "$REGISTRED" ]
			then
				# Get temperature in base 10
				TEMPERATURE=$(echo "ibase=2; $BIN_TEMPERATURE" | bc 2>&1)
				# Extract real temperature
				TEMPERATURE=$(bc <<< "scale=1; ($TEMPERATURE-400)/10")

				# Get humidity in base 10
				HUMIDITY=$(echo "ibase=2; $BIN_HUMIDITY" | bc 2>&1)

				echo "  - $TEMPERATURE° @ $HUMIDITY% for sensor: $SENSOR_ID" >> $LOG_FILE_PATH

				SENSOR_RRD_FILE_PATH="$RRD_FOLDER/${SENSOR_ID}.rrd"

				# Database doesn't exist => create it
				if [ ! -f "$SENSOR_RRD_FILE_PATH" ]
				then
					# 1 entry each 10 minutes
					# Keep 366 days
					rrdtool create "$SENSOR_RRD_FILE_PATH" -s 600 -b $(date +%s) DS:temperature:GAUGE:1200:-40:62.4 DS:humidity:GAUGE:1200:0:100 RRA:AVERAGE:0.5:1:52704 2>&1 >> $LOG_FILE_PATH
					# Wait all is up and running
					# Needed for rrdupdate
					sleep 1	
				fi

				# Update RRD database
				rrdupdate "$SENSOR_RRD_FILE_PATH" $(/bin/date +%s):$TEMPERATURE:$HUMIDITY 2>&1 >> $LOG_FILE_PATH

				# Define CSV file path
				SENSOR_RRD_CSV_FILE="$CSV_FOLDER/${SENSOR_ID}.rrd.csv"

				# Convert RRD to CSV file
				# Keep only one week
				rrd2csv.pl -s end-7day -e now "$SENSOR_RRD_FILE_PATH" > "$SENSOR_RRD_CSV_FILE"
				# Delete header
				sed -i "1s/.*/Date,Temp,Hum/" "$SENSOR_RRD_CSV_FILE"
				# Delete last line which is always a line with zero values
				sed -i '$ d' "$SENSOR_RRD_CSV_FILE"

				# Update "info" section in configuration file using HTTP request
				# Example: 18.5° / 65% • 08:35:10 
				OUTPUT=`curl -i --silent --data "sensorId=$SENSOR_ID&info=$TEMPERATURE° / $HUMIDITY% • ${RECEIVED_DATE:11:8}" "http://localhost/$SOLUTION_NAME/API/set/info/" 2>&1`
				if [ `echo "$OUTPUT" | head -1 | grep " 200 " > /dev/null 2>&1; echo $?` -ne 0 ]
				then
					echo "  - [ERROR] Fail to update user interface. Details: $OUTPUT" >> $LOG_FILE_PATH
				fi 
			else
				echo "  - Sensor identifier not registred in configuration: $SENSOR_ID" >> $LOG_FILE_PATH
			fi

		else
			echo "  - RSL code received: $CODE" >> $LOG_FILE_PATH
		fi
	else
		echo "  - VALUE RECEIVED: $CODE" >> $LOG_FILE_PATH
	fi

done < <(cat /dev/ttyAMA0)
#done < <((stty 115200 cs8 -ixon; cat) < /dev/ttyACM0)

